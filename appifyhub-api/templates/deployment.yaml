apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Values.app.name }}
    instance: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    {{- if eq .Values.secrets.provider "doppler" }}
    secrets.doppler.com/reload: "true"
    {{- end }}

spec:
  replicas: {{ .Values.app.replicas }}
  revisionHistoryLimit: {{ .Values.app.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
      instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Values.app.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Values.app.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{- if .Values.app.monitors.enabled }}
        {{- range $key, $value := .Values.app.monitors.annotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
    spec:
      # Ephemeral storage for the keystore (deleted on pod termination)
      volumes:
        - name: keystore-volume
          emptyDir: {}

      initContainers:
        # Waits until database is available
        - name: wait-for-db
          image: postgres:15-alpine
          command:
            - "sh"
            - "-c"
            - |
              until pg_isready -h {{ .Values.config.values.POSTGRES_HOST }} -p 5432; do
                echo Waiting for database
                sleep 2
              done
          envFrom:
          {{- if eq .Values.secrets.provider "doppler" }}
            - secretRef:
                name: {{ .Release.Name }}-doppler-secret
          {{- end }}
          {{- if .Values.config.enabled }}
            - configMapRef:
                name: {{ .Release.Name }}-config
          {{- end }}
        # Initializes the keystore file from the Doppler secret
        - name: keystore-init
          image: busybox:latest
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          env:
          {{- if eq .Values.secrets.provider "doppler" }}
            - name: KEYSTORE_BASE64
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-doppler-secret
                  key: KEYSTORE_BASE64
          {{- end }}
          {{- if .Values.config.enabled }}
            - name: KEYSTORE_FILE
              value: {{ .Values.config.values.KEYSTORE_FILE }}
          {{- end }}
          volumeMounts:
            - name: keystore-volume
              mountPath: "/data"
          command:
            - "sh"
            - "-c"
            - |
              # Based on the mount path, we use /data
              DEST_FILE="/data${KEYSTORE_FILE}"
              mkdir -p $(dirname $DEST_FILE)
              # Decode the base64-encoded keystore and save it
              echo $KEYSTORE_BASE64 | base64 -d > $DEST_FILE
              # Set the file permissions to read-only for the user
              chmod 400 $DEST_FILE

      # Runs the main application container
      containers:
        - name: {{ .Values.app.name }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          volumeMounts:
            - name: keystore-volume
              mountPath: "{{ .Values.config.values.KEYSTORE_FILE }}"
              subPath: "{{ .Values.config.values.KEYSTORE_FILE | base }}"
          envFrom:
          {{- if eq .Values.secrets.provider "doppler" }}
            - secretRef:
                name: {{ .Release.Name }}-doppler-secret
          {{- end }}
          {{- if .Values.config.enabled }}
            - configMapRef:
                name: {{ .Release.Name }}-config
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.app.containerPort }}
              protocol: TCP
          resources:
            requests:
              cpu: "{{ .Values.app.resources.requests.cpu }}"
              memory: "{{ .Values.app.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.app.resources.limits.cpu }}"
              memory: "{{ .Values.app.resources.limits.memory }}"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: {{ .Values.app.containerPort }}
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: {{ .Values.app.containerPort }}
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 5
